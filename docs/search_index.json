[
["index.html", "Data Science for Biological, Medical and Health Research: Notes for PQHS 431 Introduction Structure Course Philosophy Working with this Document", " Data Science for Biological, Medical and Health Research: Notes for PQHS 431 Thomas E. Love, Ph.D. Version: 2019-08-25 22:15:11 Introduction These Notes provide a series of examples using R to work through issues that are likely to come up in PQHS/CRSP/MPHP 431. While these Notes share some of the features of a textbook, they are neither comprehensive nor completely original. The main purpose is to give 431 students a set of common materials on which to draw during the course. In class, we will sometimes: reiterate points made in this document, amplify what is here, simplify the presentation of things done here, use new examples to show some of the same techniques, refer to issues not mentioned in this document, but what we don’t do is follow these notes very precisely. We assume instead that you will read the materials and try to learn from them, just as you will attend classes and try to learn from them. We welcome feedback of all kinds on this document or anything else. Just email us at 431-help at case dot edu, or submit a pull request. What you will mostly find are brief explanations of a key idea or summary, accompanied (most of the time) by R code and a demonstration of the results of applying that code. Everything you see here is available to you as HTML or PDF. You will also have access to the R Markdown files, which contain the code which generates everything in the document, including all of the R results. We will demonstrate the use of R Markdown (this document is generated with the additional help of an R package called bookdown) and RStudio (the “program” which we use to interface with the R language) in class. All data and R code related to these notes are available through the course website. Structure The Notes, like the 431 course, fall in three main parts. Part A is about visualizing data and exploratory data analyses. These Notes focus on using R to work through issues that arise in the process of exploring data, managing (cleaning and manipulating) data into a tidy format to facilitate useful work downstream, and describing those data effectively with visualizations, numerical summaries, and some simple models. Part B is about making comparisons with data. The Notes discuss the use of R to address comparisons of means and of rates/proportions, primarily. The main ideas include confidence intervals, using the bootstrap and making decisions about power and sample size. We’ll also discuss the value (or lack thereof) of p values for assessing hypotheses. Key ideas from Part A that have an impact here include visualizations to check the assumptions behind our inferences, and cleaning/manipulating data to facilitate our comparisons. Part C is about building models with data. The Notes are primarily concerned (in 431) with linear regression models for continuous quantitative outcomes, using one or more predictors. We’ll see how to use models to accomplish many of the comparisons discussed in Part B, and make heavy use of visualization and data management tools developed in Part A to assess our models. Course Philosophy In developing this course, we adopt a modern approach that places data at the center of our work. Our goal is to teach you how to do truly reproducible research with modern tools. We want you to be able to answer real questions using data and equip you with the tools you need in order to answer those questions well (Çetinkaya-Rundel (2017) has more on a related teaching philosophy.) The curriculum includes more on several topics than you might expect from a standard graduate introduction to statistics. data gathering data wrangling exploratory data analysis and visualization multivariate modeling communication It also nearly completely avoids formalism and is extremely applied - this is most definitely not a course in theoretical or mathematical statistics. There’s very little of this: \\[ f(x) = \\frac{e^{-(x - \\mu)^{2}/(2\\sigma^{2})}}{\\sigma{\\sqrt{2 \\pi }}} \\] Instead, there’s a lot of this: nyfs1 %&gt;% group_by(bmi.cat) %&gt;% summarise(mean = mean(waist.circ), median = median(waist.circ), sd = sd(waist.circ)) The 431 course is about getting things done. It’s not a statistics course alone, nor is it a course in computer programming alone. I think of it as a course in data science. Working with this Document This document is broken down into multiple chapters. Use the table of contents at left to navigate. At the top of the document, you’ll see icons which you can click to search the document, change the size, font or color scheme of the page, and download a PDF or EPUB (Kindle-readable) version of the entire document. The document is updated occasionally through the semester. Check the Version information above to verify the last update time. References "],
["data-science.html", "Chapter 1 Data Science 1.1 Why a unicorn? 1.2 Data Science Project Cycle 1.3 What Will We Discuss in 431?", " Chapter 1 Data Science The definition of data science can be a little slippery. One current view of data science, is exemplified by Steven Geringer’s 2014 Venn diagram. Figure 1.1: Data Science Venn Diagram from Steven Geringer The field encompasses ideas from mathematics and statistics and from computer science, but with a heavy reliance on subject-matter knowledge. In our case, this includes clinical, health-related, medical or biological knowledge. As Gelman and Nolan (2017) suggest, the experience and intuition necessary for good statistical practice are hard to obtain, and teaching data science provides an excellent opportunity to reinforce statistical thinking skills across the full cycle of a data analysis project. The principal form in which computer science (coding/programming) play a role in this course is to provide a form of communication. You’ll need to learn how to express your ideas not just orally and in writing, but also through your code. 1.1 Why a unicorn? Data Science is a team activity. Everyone working in data science brings some part of the necessary skillset, but no one person can cover all three areas alone for excellent projects. [The individual who is truly expert in all three key areas (mathematics/statistics, computer science and subject-matter knowledge) is] a mythical beast with magical powers who’s rumored to exist but is never actually seen in the wild. http://www.kdnuggets.com/2016/10/battle-data-science-venn-diagrams.html 1.2 Data Science Project Cycle A typical data science project can be modeled as follows, which comes from the introduction to the amazing book R for Data Science, by Garrett Grolemund and Hadley Wickham, which is a key text for this course (Grolemund and Wickham 2019). Figure 1.2: Source: R for Data Science: Introduction This diagram is sometimes referred to as the Krebs Cycle of Data Science. For more on the steps of a data science project, we encourage you to read the Introduction of Grolemund and Wickham (2019). 1.3 What Will We Discuss in 431? We’ll discuss each of these elements in the 431 course, focusing at the start on understanding our data through transformation, modeling and (especially in the early stages) visualization. In 431, we learn how to get things done. We get people working with R and R Studio and R Markdown, even if they are completely new to coding. A gentle introduction is provided at Ismay and Kim (2019) We learn how to use the tidyverse (http://www.tidyverse.org/), an array of tools in R (mostly developed by Hadley Wickham and his colleagues at R Studio) which share an underlying philosophy to make data science faster, easier, more reproducible and more fun. A critical text for understanding the tidyverse is Grolemund and Wickham (2019). Tidyverse tools facilitate: importing data into R, which can be the source of intense pain for some things, but is really quite easy 95% of the time with the right tool. tidying data, that is, storing it in a format that includes one row per observation and one column per variable. This is harder, and more important, than you might think. transforming data, perhaps by identifying specific subgroups of interest, creating new variables based on existing ones, or calculating summaries. visualizing data to generate actual knowledge and identify questions about the data - this is an area where R really shines, and we’ll start with it in class. modeling data, taking the approach that modeling is complementary to visualization, and allows us to answer questions that visualization helps us identify. and last, but definitely not least, communicating results, models and visualizations to others, in a way that is reproducible and effective. Some programming/coding is an inevitable requirement to accomplish all of these aims. If you are leery of coding, you’ll need to get past that, with the help of this course and our stellar teaching assistants. Getting started is always the most challenging part, but our experience is that most of the pain of developing these new skills evaporates by early October. Having completed some fundamental work in Part A of the course, we then learn how to use a variety of R packages and statistical methods to accomplish specific inferential tasks (in Part B, mostly) and modeling tasks (in Part C, mostly.) References "],
["Rsetup.html", "Chapter 2 Setting Up R 2.1 R Markdown 2.2 R Packages 2.3 Other Packages", " Chapter 2 Setting Up R These Notes make extensive use of the statistical software language R, and the development environment R Studio, both of which are free, and you’ll need to install them on your machine. Instructions for doing so are in found in the course syllabus. If you need an even gentler introduction, or if you’re just new to R and RStudio and need to learn about them, we encourage you to take a look at http://moderndive.com/, which provides an introduction to statistical and data sciences via R at Ismay and Kim (2019). 2.1 R Markdown These notes were written using R Markdown. R Markdown, like R and R Studio, is free and open source. R Markdown is described as an authoring framework for data science, which lets you save and execute R code generate high-quality reports that can be shared with an audience This description comes from http://rmarkdown.rstudio.com/lesson-1.html which you can visit to get an overview and quick tour of what’s possible with R Markdown. Another excellent resource to learn more about R Markdown tools is the Communicate section (especially the R Markdown chapter) of Grolemund and Wickham (2019). 2.2 R Packages To start, I’ll present a series of commands I run at the beginning of these Notes. These particular commands set up the output so it will look nice as either an HTML or PDF file, and also set up R to use several packages (libraries) of functions that expand its capabilities. A chunk of code like this will occur near the top of any R Markdown work. knitr::opts_chunk$set(comment = NA) # library(boot); library(devtools); library(grid); # library(pander); library(pwr); # library(viridis) library(knitr); library(NHANES); library(janitor); library(tidyverse) # source(&quot;data/Love-boost.R&quot;) I have deliberately set up this list of loaded packages/libraries to be relatively small, and will add some other packages later, as needed. You only need to install a package once, but you need to reload it every time you start a new session. 2.3 Other Packages I may also make use of functions in the following packages/libraries, but when I do so, I will explicitly specify the package name, using a command like Hmisc::describe(x), rather than just describe(x), so as to specify that I want the Hmisc package’s version of describe applied to whatever x is. Those packages are: aplpack which provides stem.leaf and stem.leaf.backback for building fancier stem-and-leaf displays arm which provides a set of functions for model building and checking that are used in Gelman and Hill (2007) broom which turns the results lots of different analyses in R into more useful tidy data frames (tibbles.) car which provides some tools for building scatterplot matrices, but also many other functions described in Fox and Weisberg (2011) cowplot which is used in Part C to put multiple graphical objects in the same plot, like gridExtra: https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html Epi for 2x2 table analyses and materials for classical epidemiology: http://BendixCarstensen.com/Epi/ GGally for scatterplot and correlation matrix visualizations: http://ggobi.github.io/ggally/ ggridges which is used to make ridgeline plots gridExtra which includes a variety of functions for manipulating graphs: https://github.com/baptiste/gridextra Hmisc from Frank Harrell at Vanderbilt U., for its version of describe and for many regression modeling functions we’ll use in 432. Details on Hmisc are at http://biostat.mc.vanderbilt.edu/wiki/Main/Hmisc. Frank has written several books - the most useful of which for 431 students is probably Harrell and Slaughter (2019) mice, which we’ll use (a little) in 431 for multiple imputation to deal with missing data: http://www.stefvanbuuren.nl/mi/ mosaic, mostly for its favstats summary, but Project MOSAIC is a community of educators you might be interested in: http://mosaic-web.org/ psych for its own version of describe, but other features are described at http://personality-project.org/r/psych/ We also will use a package called xda for two functions called numSummary and charSummary, but that package gets loaded via devtools and GitHub by the code in these Notes. Several other packages are included below, even though they are not used in these Notes, because they will be used in class sessions or in 432. When compiling the Notes from the original code files, these packages will need to be installed (but not loaded) in R, or an error will be thrown when compiling this document. To install all of the packages used within these Notes, type in (or copy and paste) the following commands and run them in the R Console. Again, you only need to install a package once, but you need to reload it every time you start a new session. pkgs &lt;- c(&quot;aplpack&quot;, &quot;arm&quot;, &quot;babynames&quot;, &quot;boot&quot;, &quot;broom&quot;, &quot;car&quot;, &quot;cowplot&quot;, &quot;devtools&quot;, &quot;Epi&quot;, &quot;faraway&quot;, &quot;fivethirtyeight&quot;, &quot;foreign&quot;, &quot;gapminder&quot;, &quot;GGally&quot;, &quot;ggridges&quot;, &quot;gridExtra&quot;, &quot;Hmisc&quot;, &quot;janitor&quot;, &quot;kableExtra&quot;, &quot;knitr&quot;, &quot;lme4&quot;, &quot;magrittr&quot;, &quot;markdown&quot;, &quot;MASS&quot;, &quot;mice&quot;, &quot;mosaic&quot;, &quot;multcomp&quot;, &quot;NHANES&quot;, &quot;pander&quot;, &quot;psych&quot;, &quot;pwr&quot;, &quot;qcc&quot;, &quot;rmarkdown&quot;, &quot;rmdformats&quot;, &quot;rms&quot;, &quot;sandwich&quot;, &quot;simputation&quot;, &quot;survival&quot;, &quot;tableone&quot;, &quot;tidyverse&quot;, &quot;vcd&quot;, &quot;viridis&quot;) install.packages(pkgs) References "],
["dataviz.html", "Chapter 3 Visualizing Data 3.1 The NHANES data: Collecting a Sample 3.2 Age and Height 3.3 Subset of Subjects with Known Age and Height 3.4 Age-Height and Sex? 3.5 A New Subset: Ages 21-79 3.6 Distribution of Heights 3.7 Height and Sex 3.8 Looking at Pulse Rate 3.9 General Health Status 3.10 Conclusions", " Chapter 3 Visualizing Data Part A of these Notes is designed to ease your transition into working effectively with data, so that you can better understand it. We’ll start by visualizing some data from the US National Health and Nutrition Examination Survey, or NHANES. We’ll display R code as we go, but we’ll return to all of the key coding ideas involved later in the Notes. 3.1 The NHANES data: Collecting a Sample To begin, we’ll gather a random sample of 1,000 subjects participating in NHANES, and then identify several variables of interest about those subjects1. Some of the motivation for this example came from a Figure in Baumer, Kaplan, and Horton (2017). # library(NHANES) # already loaded NHANES package/library of functions, data set.seed(431001) # use set.seed to ensure that we all get the same random sample # of 1,000 NHANES subjects in our nh_data collection nh_dat1 &lt;- sample_n(NHANES, size = 1000) %&gt;% select(ID, Gender, Age, Height) nh_dat1 # A tibble: 1,000 x 4 ID Gender Age Height &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; 1 69638 female 5 106. 2 70782 male 64 176. 3 52408 female 54 162. 4 59031 female 15 155. 5 64530 male 53 185. 6 71040 male 63 169. 7 55186 female 30 168. 8 60211 male 5 103. 9 55730 male 66 161. 10 68229 female 36 170. # ... with 990 more rows We have 1000 rows (observations) and 4 columns (variables) that describe the subjects listed in the rows. 3.2 Age and Height Suppose we want to visualize the relationship of Height and Age in our 1,000 NHANES observations. The best choice is likely to be a scatterplot. ggplot(data = nh_dat1, aes(x = Age, y = Height)) + geom_point() Warning: Removed 37 rows containing missing values (geom_point). We note several interesting results here. As a warning, R tells us that it has “Removed 37 rows containing missing values (geom_point).” Only 963 subjects plotted here, because the remaining 37 people have missing (NA) values for either Height, Age or both. Unsurprisingly, the measured Heights of subjects grow from Age 0 to Age 20 or so, and we see that a typical Height increases rapidly across these Ages. The middle of the distribution at later Ages is pretty consistent at at a Height somewhere between 150 and 175. The units aren’t specified, but we expect they must be centimeters. The Ages are clearly reported in Years. No Age is reported over 80, and it appears that there is a large cluster of Ages at 80. This may be due to a requirement that Ages 80 and above be reported at 80 so as to help mask the identity of those individuals.2 As in this case, we’re going to build most of our visualizations using tools from the ggplot2 package, which is part of the tidyverse series of packages. You’ll see similar coding structures throughout this Chapter, most of which are covered as well in Chapter 3 of Grolemund and Wickham (2019). 3.3 Subset of Subjects with Known Age and Height Before we move on, let’s manipulate the data set a bit, to focus on only those subjects who have complete data on both Age and Height. This will help us avoid that warning message. nh_dat2 &lt;- nh_dat1 %&gt;% filter(complete.cases(Age, Height)) summary(nh_dat2) ID Gender Age Height Min. :51624 female:484 Min. : 2.00 Min. : 85.0 1st Qu.:57034 male :479 1st Qu.:19.00 1st Qu.:156.2 Median :62056 Median :37.00 Median :165.0 Mean :61967 Mean :38.29 Mean :162.3 3rd Qu.:67269 3rd Qu.:56.00 3rd Qu.:174.5 Max. :71875 Max. :80.00 Max. :195.9 Note that the units and explanations for these variables are contained in the NHANES help file, available via typing ?NHANES in the Console of R Studio, or by typing NHANES into the Search bar in R Studio’s Help window. 3.3.1 The Distinction between Gender and Sex The Gender variable here is a mistake. These data refer to the biological status of these subjects, which is their Sex, and not the social construct of Gender which can be quite different. In our effort to avoid further confusion, we’ll rename the variable Gender to instead more accurately describe what is actually measured here. To do this, we can use this approach… nh_dat2 &lt;- nh_dat1 %&gt;% rename(Sex = Gender) %&gt;% filter(complete.cases(Age, Height)) summary(nh_dat2) ID Sex Age Height Min. :51624 female:484 Min. : 2.00 Min. : 85.0 1st Qu.:57034 male :479 1st Qu.:19.00 1st Qu.:156.2 Median :62056 Median :37.00 Median :165.0 Mean :61967 Mean :38.29 Mean :162.3 3rd Qu.:67269 3rd Qu.:56.00 3rd Qu.:174.5 Max. :71875 Max. :80.00 Max. :195.9 That’s better. How many observations do we have now? We could use dim to find out the number of rows and columns in this new data set. dim(nh_dat2) [1] 963 4 Or, we could simply list the data set and read off the result. nh_dat2 # A tibble: 963 x 4 ID Sex Age Height &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; 1 69638 female 5 106. 2 70782 male 64 176. 3 52408 female 54 162. 4 59031 female 15 155. 5 64530 male 53 185. 6 71040 male 63 169. 7 55186 female 30 168. 8 60211 male 5 103. 9 55730 male 66 161. 10 68229 female 36 170. # ... with 953 more rows 3.4 Age-Height and Sex? Let’s add Sex to the plot using color, and also adjust the y axis label to incorporate the units of measurement. ggplot(data = nh_dat2, aes(x = Age, y = Height, color = Sex)) + geom_point() + labs(title = &quot;Height-Age Relationship in NHANES sample&quot;, y = &quot;Height in cm.&quot;) 3.4.1 Can we show the Female and Male relationships in separate panels? Sure. ggplot(data = nh_dat2, aes(x = Age, y = Height, color = Sex)) + geom_point() + labs(title = &quot;Height-Age Relationship in NHANES sample&quot;, y = &quot;Height in cm.&quot;) + facet_wrap(~ Sex) 3.4.2 Can we add a smooth curve to show the relationship in each plot? Yep, and let’s change the theme of the graph to remove the gray background, too. ggplot(data = nh_dat2, aes(x = Age, y = Height, color = Sex)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + labs(title = &quot;Height-Age Relationship in NHANES sample&quot;, y = &quot;Height in cm.&quot;) + theme_bw() + facet_wrap(~ Sex) 3.4.3 What if we want to assume straight line relationships? We could look at a linear model in the plot. Does this make sense here? ggplot(data = nh_dat2, aes(x = Age, y = Height, color = Sex)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + labs(title = &quot;Height-Age Relationship in NHANES sample&quot;, y = &quot;Height in cm.&quot;) + theme_bw() + facet_wrap(~ Sex) 3.5 A New Subset: Ages 21-79 Suppose we wanted to look only at those observations (subjects) whose Age is at least 21 and at most 79. Suppose also that we want to look at some of the additional variables available in NHANES. To start, we’ll do the following: Set a seed for the random sampling from the original NHANES data, so we get the same original sample of 1000 people we started with earlier. Select 1000 people from the NHANES data. Filter the sample to only those people whose age is more than 20 and less than 80 years. Select the variables we will be using in the remainder of this chapter, which will be: Age as we’ve seen before, in years. Height as we’ve seen before, in centimeters. Gender which we’ll rename as Sex again. Pulse = 60 second pulse rate (in beats per minute). BPSysAve = Systolic Blood Pressure, in mm Hg (and we’ll rename this SBP). SleepTrouble = Yes means the subject has told a health professional that they had trouble sleeping. PhysActive = Yes means the subject does moderate or vigorous-intensity sports, fitness or recreational activity. MaritalStatus = one of Married, Widowed, Divorced, Separated, NeverMarried or LivePartner (living with partner.) HealthGen = self-reported rating of general health, one of Excellent, Vgood (Very Good), Good, Fair or Poor. Rename Gender as Sex, to more accurately describe what is being measured. Omit subjects with any missingness on any of the variables we’ve selected. Can you see how the code below accomplishes these tasks? set.seed(431001) # again, this will ensure the same sample nh_data_2179 &lt;- sample_n(NHANES, size = 1000) %&gt;% filter(Age &gt; 20 &amp; Age &lt; 80) %&gt;% select(ID, Gender, Age, Height, Pulse, BPSysAve, SleepTrouble, PhysActive, MaritalStatus, HealthGen) %&gt;% rename(Sex = Gender, SBP = BPSysAve) %&gt;% na.omit nh_data_2179 # A tibble: 603 x 10 ID Sex Age Height Pulse SBP SleepTrouble PhysActive &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; 1 70782 male 64 176. 78 127 No No 2 52408 fema~ 54 162. 80 135 No No 3 64530 male 53 185. 100 131 No No 4 71040 male 63 169. 70 124 Yes Yes 5 55186 fema~ 30 168. 76 107 No No 6 55730 male 66 161. 78 133 No No 7 68229 fema~ 36 170. 90 105 No Yes 8 63762 male 23 180. 66 118 No No 9 66290 fema~ 63 162. 88 116 No No 10 66984 male 75 174. 84 141 No No # ... with 593 more rows, and 2 more variables: MaritalStatus &lt;fct&gt;, # HealthGen &lt;fct&gt; 3.6 Distribution of Heights What is the distribution of height in this new sample? ggplot(data = nh_data_2179, aes(x = Height)) + geom_histogram() `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. We can do several things to clean this up. We’ll change the color of the lines for each bar of the histogram. We’ll change the fill inside each bar to make them stand out a bit more. We’ll add a title and relabel the horizontal (x) axis to include the units of measurement. We’ll avoid the warning by selecting a number of bins (we’ll use 25 here) into which we’ll group the heights before drawing the histogram. ggplot(data = nh_data_2179, aes(x = Height)) + geom_histogram(bins = 25, col = &quot;yellow&quot;, fill = &quot;blue&quot;) + labs(title = &quot;Height of NHANES subjects ages 21-79&quot;, x = &quot;Height in cm.&quot;) 3.6.1 Changing a Histogram’s Fill and Color The CWRU color guide (https://case.edu/umc/our-brand/visual-guidelines/) lists the HTML color schemes for CWRU blue and CWRU gray. Let’s match that color scheme. cwru.blue &lt;- &#39;#0a304e&#39; cwru.gray &lt;- &#39;#626262&#39; ggplot(data = nh_data_2179, aes(x = Height)) + geom_histogram(binwidth = 2, col = cwru.gray, fill = cwru.blue) + labs(title = &quot;Height of NHANES subjects ages 21-79&quot;, x = &quot;Height in cm.&quot;) + theme_bw() Note the other changes to the graph above. We changed the theme to replace the gray background. We changed the bins for the histogram, to gather observations into groups of 2 cm. each. 3.7 Height and Sex ggplot(data = nh_data_2179, aes(x = Sex, y = Height, color = Sex)) + geom_point() + labs(title = &quot;Height by Sex for NHANES subjects ages 21-79&quot;, y = &quot;Height in cm.&quot;) This plot isn’t so useful. We can improve things a little by jittering the points horizontally, so that the overlap is reduced. ggplot(data = nh_data_2179, aes(x = Sex, y = Height, color = Sex)) + geom_jitter(width = 0.2) + labs(title = &quot;Height by Sex (jittered) for NHANES subjects ages 21-79&quot;, y = &quot;Height in cm.&quot;) Perhaps it might be better to summarise the distribution in a different way. We might consider a boxplot of the data. 3.7.1 A Boxplot of Height by Sex ggplot(data = nh_data_2179, aes(x = Sex, y = Height, fill = Sex)) + geom_boxplot() + labs(title = &quot;Boxplot of Height by Sex for NHANES subjects ages 21-79&quot;, y = &quot;Height in cm.&quot;) Or perhaps we’d like to see a pair of histograms? 3.7.2 Histograms of Height by Sex ggplot(data = nh_data_2179, aes(x = Height, fill = Sex)) + geom_histogram(color = &quot;white&quot;, bins = 20) + labs(title = &quot;Histogram of Height by Sex for NHANES subjects ages 21-79&quot;, x = &quot;Height in cm.&quot;) + facet_wrap(~ Sex) Can we redraw these histograms so that they are a little more comparable, and to get rid of the unnecessary legend? ggplot(data = nh_data_2179, aes(x = Height, fill = Sex)) + geom_histogram(color = &quot;white&quot;, bins = 20) + labs(title = &quot;Histogram of Height by Sex for NHANES subjects ages 21-79 (Revised)&quot;, x = &quot;Height in cm.&quot;) + guides(fill = FALSE) + facet_grid(Sex ~ .) 3.8 Looking at Pulse Rate Let’s look at a different outcome, the pulse rate for our subjects. Here’s a histogram, again with CWRU colors, for the pulse rates in our sample. ggplot(data = nh_data_2179, aes(x = Pulse)) + geom_histogram(binwidth = 1, fill = cwru.blue, col = cwru.gray) + labs(title = &quot;Histogram of Pulse Rate: NHANES subjects ages 21-79&quot;, x = &quot;Pulse Rate (beats per minute)&quot;) Suppose we instead bin up groups of 5 beats per minute together as we plot the Pulse rates. ggplot(data = nh_data_2179, aes(x = Pulse)) + geom_histogram(binwidth = 5, fill = cwru.blue, col = cwru.gray) + labs(title = &quot;Histogram of Pulse Rate: NHANES subjects ages 21-79&quot;, x = &quot;Pulse Rate (beats per minute)&quot;) Which is the more useful representation will depend a lot on what questions you’re trying to answer. 3.8.1 Pulse Rate and Physical Activity We can also split up our data into groups based on whether the subjects are physically active. Let’s try a boxplot. ggplot(data = nh_data_2179, aes(y = Pulse, x = PhysActive, fill = PhysActive)) + geom_boxplot() + labs(title = &quot;Pulse Rate by Physical Activity Status for NHANES ages 21-79&quot;) As an accompanying numerical summary, we might ask how many people fall into each of these PhysActive categories, and what is their “average” Pulse rate. nh_data_2179 %&gt;% group_by(PhysActive) %&gt;% summarise(count = n(), mean(Pulse), median(Pulse)) %&gt;% knitr::kable(digits = 2) PhysActive count mean(Pulse) median(Pulse) No 293 74.21 74 Yes 310 72.37 72 The knitr::kable(digits = 2) piece of this command tells R Markdown to generate a table with some attractive formatting, and rounding any decimals to two figures. 3.8.2 Pulse by Sleeping Trouble ggplot(data = nh_data_2179, aes(x = Pulse, fill = SleepTrouble)) + geom_histogram(color = &quot;white&quot;, bins = 20) + labs(title = &quot;Histogram of Pulse Rate by Sleep Trouble for NHANES subjects ages 21-79&quot;, x = &quot;Pulse Rate (beats per minute)&quot;) + guides(fill = FALSE) + facet_grid(SleepTrouble ~ ., labeller = &quot;label_both&quot;) How many people fall into each of these SleepTrouble categories, and what is their “average” Pulse rate? nh_data_2179 %&gt;% group_by(SleepTrouble) %&gt;% summarise(count = n(), mean(Pulse), median(Pulse)) %&gt;% knitr::kable(digits = 2) SleepTrouble count mean(Pulse) median(Pulse) No 457 73.05 72 Yes 146 73.96 72 3.8.3 Pulse and HealthGen We can compare the distribution of Pulse rate across groups by the subject’s self-reported overall health (HealthGen), as well. ggplot(data = nh_data_2179, aes(x = HealthGen, y = Pulse, fill = HealthGen)) + geom_boxplot() + labs(title = &quot;Pulse by Self-Reported Overall Health for NHANES ages 21-79&quot;, x = &quot;Pulse Rate&quot;) + guides(fill = FALSE) How many people fall into each of these HealthGen categories, and what is their “average” Pulse rate? nh_data_2179 %&gt;% group_by(HealthGen) %&gt;% summarise(count = n(), mean(Pulse), median(Pulse)) %&gt;% knitr::kable(digits = 2) HealthGen count mean(Pulse) median(Pulse) Excellent 64 69.97 69 Vgood 196 72.81 72 Good 238 73.66 72 Fair 83 74.22 74 Poor 22 79.09 77 3.8.4 Pulse Rate and Systolic Blood Pressure ggplot(data = nh_data_2179, aes(x = SBP, y = Pulse)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + labs(title = &quot;SBP vs. Pulse rate for NHANES subjects, ages 21-79&quot;) 3.8.5 Sleep Troubls vs. No Sleep Trouble? Could we see whether subjects who have described SleepTrouble show different SBP-pulse rate patterns than the subjects who haven’t? Let’s try doing this by changing the shape and the color of the points based on SleepTrouble. ggplot(data = nh_data_2179, aes(x = SBP, y = Pulse, color = SleepTrouble, shape = SleepTrouble)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + labs(title = &quot;SBP vs. Pulse rate for NHANES subjects, ages 21-79&quot;) This plot might be easier to interpret if we faceted by SleepTrouble, as well. ggplot(data = nh_data_2179, aes(x = SBP, y = Pulse, color = SleepTrouble, shape = SleepTrouble)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + labs(title = &quot;SBP vs. Pulse rate for NHANES subjects, ages 21-79&quot;) + facet_wrap(~ SleepTrouble, labeller = &quot;label_both&quot;) 3.9 General Health Status Here’s a Table of the General Health Status results. Again, this is a self-reported rating of each subject’s health on a five point scale (Excellent, Very Good, Good, Fair, Poor.) nh_data_2179 %&gt;% select(HealthGen) %&gt;% table() . Excellent Vgood Good Fair Poor 64 196 238 83 22 The HealthGen data are categorical, which means that summarizing them with averages isn’t as appealing as looking at percentages, proportions and rates. Another, somewhat simpler way to get a table of this sort of information uses the tabyl function from the janitor package in R. # tabyl is part of the janitor package # already loaded: library(janitor) nh_data_2179 %&gt;% tabyl(HealthGen) HealthGen n percent Excellent 64 0.10613599 Vgood 196 0.32504146 Good 238 0.39469320 Fair 83 0.13764511 Poor 22 0.03648425 I don’t actually like the title of percent here, as it’s really a proportion, but that can be adjusted, and we can add a total. nh_data_2179 %&gt;% tabyl(HealthGen) %&gt;% adorn_totals() %&gt;% adorn_pct_formatting() HealthGen n percent Excellent 64 10.6% Vgood 196 32.5% Good 238 39.5% Fair 83 13.8% Poor 22 3.6% Total 603 100.0% When working with an unordered categorical variable, like MaritalStatus, the same approach can work. nh_data_2179 %&gt;% tabyl(MaritalStatus) %&gt;% adorn_totals() %&gt;% adorn_pct_formatting() MaritalStatus n percent Divorced 61 10.1% LivePartner 43 7.1% Married 349 57.9% NeverMarried 104 17.2% Separated 8 1.3% Widowed 38 6.3% Total 603 100.0% 3.9.1 Bar Chart for Categorical Data Usually, a bar chart is the best choice for a graphing a variable made up of categories. ggplot(data = nh_data_2179, aes(x = HealthGen)) + geom_bar() There are lots of things we can do to make this plot fancier. ggplot(data = nh_data_2179, aes(x = HealthGen, fill = HealthGen)) + geom_bar() + guides(fill = FALSE) + labs(x = &quot;Self-Reported Health Status&quot;, y = &quot;Number of NHANES subjects&quot;, title = &quot;Self-Reported Health Status in NHANES subjects ages 21-79&quot;) Or, we can really go crazy… nh_data_2179 %&gt;% count(HealthGen) %&gt;% ungroup() %&gt;% mutate(pct = round(prop.table(n) * 100, 1)) %&gt;% ggplot(aes(x = HealthGen, y = pct, fill = HealthGen)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + scale_fill_viridis_d() + guides(fill = FALSE) + geom_text(aes(y = pct + 1, # nudge above top of bar label = paste0(pct, &#39;%&#39;)), # prettify position = position_dodge(width = .9), size = 4) + labs(x = &quot;Self-Reported Health Status&quot;, y = &quot;Percentage of NHANES subjects&quot;, title = &quot;Self-Reported Health Status in NHANES subjects ages 21-79&quot;) + theme_bw() 3.9.2 Working with Tables We can add both row and column marginal totals, and compare subjects by Sex, as follows… nh_data_2179 %&gt;% tabyl(Sex, HealthGen) %&gt;% adorn_totals(c(&quot;row&quot;, &quot;col&quot;)) Sex Excellent Vgood Good Fair Poor Total female 27 96 121 41 14 299 male 37 100 117 42 8 304 Total 64 196 238 83 22 603 If we like, we can make this look a little more polished with the knitr::kable function… nh_data_2179 %&gt;% tabyl(Sex, HealthGen) %&gt;% adorn_totals(c(&quot;row&quot;, &quot;col&quot;)) %&gt;% knitr::kable() Sex Excellent Vgood Good Fair Poor Total female 27 96 121 41 14 299 male 37 100 117 42 8 304 Total 64 196 238 83 22 603 Or, we can get a complete cross-tabulation, including (in this case) the percentages of people within each Sex that fall in each HealthGen category (percentages within each row) like this. nh_data_2179 %&gt;% tabyl(Sex, HealthGen) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% adorn_percentages(&quot;row&quot;) %&gt;% adorn_pct_formatting() %&gt;% adorn_ns() %&gt;% knitr::kable() Sex Excellent Vgood Good Fair Poor female 9.0% (27) 32.1% (96) 40.5% (121) 13.7% (41) 4.7% (14) male 12.2% (37) 32.9% (100) 38.5% (117) 13.8% (42) 2.6% (8) Total 10.6% (64) 32.5% (196) 39.5% (238) 13.8% (83) 3.6% (22) And, if we wanted the column percentages, to determine which sex had the higher rate of each HealthGen status level, we can get that by changing the adorn_percentages to describe results at the column level: nh_data_2179 %&gt;% tabyl(Sex, HealthGen) %&gt;% adorn_totals(&quot;col&quot;) %&gt;% adorn_percentages(&quot;col&quot;) %&gt;% adorn_pct_formatting() %&gt;% adorn_ns() %&gt;% knitr::kable() Sex Excellent Vgood Good Fair Poor Total female 42.2% (27) 49.0% (96) 50.8% (121) 49.4% (41) 63.6% (14) 49.6% (299) male 57.8% (37) 51.0% (100) 49.2% (117) 50.6% (42) 36.4% (8) 50.4% (304) 3.9.3 SBP by General Health Status Let’s consider now the relationship between self-reported overall health and systolic blood pressure. ggplot(data = nh_data_2179, aes(x = HealthGen, y = SBP, fill = HealthGen)) + geom_boxplot() + labs(title = &quot;SBP by Health Status, Overall Health for NHANES ages 21-79&quot;, y = &quot;Systolic Blood Pressure&quot;, x = &quot;Self-Reported Overall Health&quot;) + guides(fill = FALSE) We can see that not too many people self-identify with the “Poor” health category. nh_data_2179 %&gt;% group_by(HealthGen) %&gt;% summarise(count = n(), mean(SBP), median(SBP)) %&gt;% knitr::kable() HealthGen count mean(SBP) median(SBP) Excellent 64 119.1562 117.0 Vgood 196 119.0714 118.0 Good 238 120.4244 119.5 Fair 83 123.9398 119.0 Poor 22 125.8636 126.5 3.9.4 SBP by Physical Activity and General Health Status We’ll build a panel of boxplots to try to understand the relationships between Systolic Blood Pressure, General Health Status and Physical Activity. Note the use of coord_flip to rotate the graph 90 degrees, and the use of labeller within facet_wrap to include both the name of the (Physical Activity) variable and its value. ggplot(data = nh_data_2179, aes(x = HealthGen, y = SBP, fill = HealthGen)) + geom_boxplot() + labs(title = &quot;SBP by Health Status, Overall Health for NHANES ages 21-79&quot;, y = &quot;Body-mass index&quot;, x = &quot;Self-Reported Overall Health&quot;) + guides(fill = FALSE) + facet_wrap(~ PhysActive, labeller = &quot;label_both&quot;) + coord_flip() 3.9.5 SBP by Sleep Trouble and General Health Status Here’s a plot of faceted histograms, which might be used to address similar questions related to the relationship between Overall Health, Systolic Blood Pressure and Sex. ggplot(data = nh_data_2179, aes(x = SBP, fill = Sex)) + geom_histogram(color = &quot;white&quot;, bins = 20) + labs(title = &quot;SBP by Sex, Overall Health for NHANES ages 21-79&quot;, x = &quot;Body-mass index&quot;) + guides(fill = FALSE) + facet_grid(HealthGen ~ Sex) 3.10 Conclusions This is just a small piece of the toolbox for visualizations that we’ll create in this class. Many additional tools are on the way, but the main idea won’t change. Using the ggplot2 package, we can accomplish several critical tasks in creating a visualization, including: Identifying (and labeling) the axes and titles Identifying a type of geom to use, like a point, bar or histogram Changing fill, color, shape, size to facilitate comparisons Building “small multiples” of plots with faceting Good data visualizations make it easy to see the data, and ggplot2’s tools make it relatively difficult to make a really bad graph. References "],
["data-structures-and-types-of-variables.html", "Chapter 4 Data Structures and Types of Variables 4.1 Data require structure and context 4.2 A New NHANES Adult Sample 4.3 Types of Variables", " Chapter 4 Data Structures and Types of Variables 4.1 Data require structure and context Descriptive statistics are concerned with the presentation, organization and summary of data, as suggested in Norman and Streiner (2014). This includes various methods of organizing and graphing data to get an idea of what those data can tell us. As Vittinghoff et al. (2012) suggest, the nature of the measurement determines how best to describe it statistically, and the main distinction is between numerical and categorical variables. Even this is a little tricky - plenty of data can have values that look like numerical values, but are just numerals serving as labels. As Bock, Velleman, and De Veaux (2004) point out, the truly critical notion, of course, is that data values, no matter what kind, are useless without their contexts. The Five W’s (Who, What [and in what units], When, Where, Why, and often How) are just as useful for establishing the context of data as they are in journalism. If you can’t answer Who and What, in particular, you don’t have any useful information. In general, each row of a data frame corresponds to an individual (respondent, experimental unit, record, or observation) about whom some characteristics are gathered in columns (and these characteristics may be called variables, factors or data elements.) Every column / variable should have a name that indicates what it is measuring, and every row / observation should have a name that indicates who is being measured. 4.2 A New NHANES Adult Sample In previous work, we spent some time with a sample from the National Health and Nutrition Examination. Now, by changing the value of the set.seed function which determines the starting place for the random sampling, and changing some other specifications, we’ll generate a new sample describing 500 adult subjects who completed the 2011-12 version of the survey when they were between the ages of 21 and 64. Note also that what is listed in the NHANES data frame as Gender should be more correctly referred to as sex. Sex is a biological feature of an individual, while Gender is a social construct. This is an important distinction, so I’ll change the name of the variable. I’m also changing the names of three other variables, to create Race, SBP and DBP. # library(NHANES) # NHANES package/library of functions, data nh_temp &lt;- NHANES %&gt;% filter(SurveyYr == &quot;2011_12&quot;) %&gt;% filter(Age &gt;= 21 &amp; Age &lt; 65) %&gt;% mutate(Sex = Gender, Race = Race3, SBP = BPSysAve, DBP = BPDiaAve) %&gt;% select(ID, Sex, Age, Race, Education, BMI, SBP, DBP, Pulse, PhysActive, Smoke100, SleepTrouble, MaritalStatus, HealthGen) set.seed(431002) # use set.seed to ensure that we all get the same random sample nh_adults &lt;- sample_n(nh_temp, size = 500) nh_adults # A tibble: 500 x 14 ID Sex Age Race Education BMI SBP DBP Pulse PhysActive &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; 1 71531 male 35 White Some Col~ 22.4 143 90 84 Yes 2 68613 fema~ 61 White Some Col~ 27.7 119 86 112 No 3 67064 male 31 White College ~ 26.6 110 76 86 Yes 4 63924 fema~ 29 Black High Sch~ 41.9 98 56 74 No 5 62840 male 60 White 8th Grade 35.8 127 0 110 No 6 68058 male 50 White Some Col~ 30.6 NA NA NA No 7 68936 fema~ 36 Black High Sch~ 30.5 119 69 60 No 8 71189 male 51 White College ~ 25.6 112 70 54 Yes 9 69936 fema~ 54 Asian College ~ 21.8 126 80 78 Yes 10 70687 male 59 White College ~ 25.5 149 89 62 Yes # ... with 490 more rows, and 4 more variables: Smoke100 &lt;fct&gt;, # SleepTrouble &lt;fct&gt;, MaritalStatus &lt;fct&gt;, HealthGen &lt;fct&gt; The data consist of 500 rows (observations) on 13 variables (columns). Essentially, we have 13 pieces of information on each of 500 adult NHANES subjects who were included in the 2011-12 panel. 4.2.1 Summarizing the Data’s Structure We can identify the number of rows and columns in a data frame or tibble with the dim function. dim(nh_adults) [1] 500 14 The str function provides a lot of information about the structure of a data frame or tibble. str(nh_adults) Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 500 obs. of 14 variables: $ ID : int 71531 68613 67064 63924 62840 68058 68936 71189 69936 70687 ... $ Sex : Factor w/ 2 levels &quot;female&quot;,&quot;male&quot;: 2 1 2 1 2 2 1 2 1 2 ... $ Age : int 35 61 31 29 60 50 36 51 54 59 ... $ Race : Factor w/ 6 levels &quot;Asian&quot;,&quot;Black&quot;,..: 5 5 5 2 5 5 2 5 1 5 ... $ Education : Factor w/ 5 levels &quot;8th Grade&quot;,&quot;9 - 11th Grade&quot;,..: 4 4 5 3 1 4 3 5 5 5 ... $ BMI : num 22.4 27.7 26.6 41.9 35.8 30.6 30.5 25.6 21.8 25.5 ... $ SBP : int 143 119 110 98 127 NA 119 112 126 149 ... $ DBP : int 90 86 76 56 0 NA 69 70 80 89 ... $ Pulse : int 84 112 86 74 110 NA 60 54 78 62 ... $ PhysActive : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 1 2 1 1 1 1 2 2 2 ... $ Smoke100 : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 1 1 2 2 2 2 1 2 1 1 ... $ SleepTrouble : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 1 1 2 2 2 1 1 1 1 ... $ MaritalStatus: Factor w/ 6 levels &quot;Divorced&quot;,&quot;LivePartner&quot;,..: 4 6 3 5 3 3 4 3 3 6 ... $ HealthGen : Factor w/ 5 levels &quot;Excellent&quot;,&quot;Vgood&quot;,..: 3 2 3 4 5 3 3 NA 3 1 ... To see the first few observations, use head, and to see the last few, try tail… tail(nh_adults, 5) # shows the last five observations in the data set # A tibble: 5 x 14 ID Sex Age Race Education BMI SBP DBP Pulse PhysActive &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; 1 66770 fema~ 22 White Some Col~ 44.6 100 90 92 Yes 2 68754 male 57 White Some Col~ 23.2 124 85 82 No 3 70911 male 59 White College ~ 24.5 118 57 76 No 4 71393 male 27 White High Sch~ 25.7 116 61 88 Yes 5 70458 fema~ 35 Black 9 - 11th~ 21.9 115 64 84 No # ... with 4 more variables: Smoke100 &lt;fct&gt;, SleepTrouble &lt;fct&gt;, # MaritalStatus &lt;fct&gt;, HealthGen &lt;fct&gt; 4.2.2 What are the variables? The variables we have collected are described in the brief table below3. Variable Description Sample Values ID a numerical code identifying the subject 64427, 63788 Sex sex of subject (2 levels) male, female Age age (years) at screening of subject 37, 40 Race reported race of subject (6 levels) White, Asian Education educational level of subject (5 levels) College Grad, High School BMI body-mass index, in kg/m2 36.5, 18.2 SBP systolic blood pressure in mm Hg 111, 115 DBP diastolic blood pressure in mm Hg 72, 74 Pulse 60 second pulse rate in beats per minute 56, 102 PhysActive Moderate or vigorous-intensity sports? Yes, No Smoke100 Smoked at least 100 cigarettes lifetime? Yes, No SleepTrouble Told a doctor they have trouble sleeping? Yes, No MaritalStatus Marital Status Married, Divorced HealthGen Self-report general health rating (5 lev.) Vgood, Good The levels for the multi-categorical variables are: Race: Mexican, Hispanic, White, Black, Asian, or Other. Education: 8th Grade, 9 - 11th Grade, High School, Some College, or College Grad. MaritalStatus: Married, Widowed, Divorced, Separated, NeverMarried or LivePartner (living with partner). HealthGen: Excellent, Vgood, Good, Fair or Poor. 4.3 Types of Variables 4.3.1 Quantitative Variables Variables recorded in numbers that we use as numbers are called quantitative. Familiar examples include incomes, heights, weights, ages, distances, times, and counts. All quantitative variables have measurement units, which tell you how the quantitative variable was measured. Without units (like miles per hour, angstroms, yen or degrees Celsius) the values of a quantitative variable have no meaning. It does little good to be promised a salary of 80,000 a year if you don’t know whether it will be paid in Euros, dollars, yen or Estonian kroon. You might be surprised to see someone whose age is 72 listed in a database on childhood diseases until you find out that age is measured in months. Often just seeking the units can reveal a variable whose definition is challenging - just how do we measure “friendliness”, or “success,” for example. Quantitative variables may also be classified by whether they are continuous or can only take on a discrete set of values. Continuous data may take on any value, within a defined range. Suppose we are measuring height. While height is really continuous, our measuring stick usually only lets us measure with a certain degree of precision. If our measurements are only trustworthy to the nearest centimeter with the ruler we have, we might describe them as discrete measures. But we could always get a more precise ruler. The measurement divisions we make in moving from a continuous concept to a discrete measurement are usually fairly arbitrary. Another way to think of this, if you enjoy music, is that, as suggested in Norman and Streiner (2014), a piano is a discrete instrument, but a violin is a continuous one, enabling finer distinctions between notes than the piano is capable of making. Sometimes the distinction between continuous and discrete is important, but usually, it’s not. The nh_adults data includes several quantitative variables, specifically Age, BMI, SBP, DBP and Pulse. We know these are quantitative because they have units: Age in years, BMI in kg/m2, the BP measurements in mm Hg, and Pulse in beats per minute. Depending on the context, we would likely treat most of these as discrete given that are measurements are fairly crude (this is certainly true for Age, measured in years) although BMI is probably continuous in most settings, even though it is a function of two other measures (Height and Weight) which are rounded off to integer numbers of centimeters and kilograms, respectively. It is also possible to separate out quantitative variables into ratio variables or interval variables. An interval variable has equal distances between values, but the zero point is arbitrary. A ratio variable has equal intervals between values, and a meaningful zero point. For example, weight is an example of a ratio variable, while IQ is an example of an interval variable. We all know what zero weight is. An intelligence score like IQ is a different matter. We say that the average IQ is 100, but that’s only by convention. We could just as easily have decided to add 400 to every IQ value and make the average 500 instead. Because IQ’s intervals are equal, the difference between and IQ of 70 and an IQ of 80 is the same as the difference between 120 and 130. However, an IQ of 100 is not twice as high as an IQ of 50. The point is that if the zero point is artificial and moveable, then the differences between numbers are meaningful but the ratios between them are not. On the other hand, most lab test values are ratio variables, as are physical characteristics like height and weight. A person who weighs 100 kg is twice as heavy as one who weighs 50 kg; even when we convert kg to pounds, this is still true. For the most part, we can treat and analyze interval or ratio variables the same way. Each of the quantitative variables in our nh_adults data can be thought of as ratio variables. Quantitative variables lend themselves to many of the summaries we will discuss, like means, quantiles, and our various measures of spread, like the standard deviation or inter-quartile range. They also have at least a chance to follow the Normal distribution. 4.3.1.1 A look at BMI (Body-Mass Index) The definition of BMI (body-mass index) for adult subjects (which is expressed in units of kg/m2) is: \\[ \\mbox{Body Mass Index} = \\frac{\\mbox{weight in kg}}{(\\mbox{height in meters})^2} = 703 \\times \\frac{\\mbox{weight in pounds}}{(\\mbox{height in inches})^2} \\] [BMI is essentially] … a measure of a person’s thinness or thickness… BMI was designed for use as a simple means of classifying average sedentary (physically inactive) populations, with an average body composition. For these individuals, the current value recommendations are as follow: a BMI from 18.5 up to 25 may indicate optimal weight, a BMI lower than 18.5 suggests the person is underweight, a number from 25 up to 30 may indicate the person is overweight, and a number from 30 upwards suggests the person is obese. Wikipedia, https://en.wikipedia.org/wiki/Body_mass_index 4.3.2 Qualitative (Categorical) Variables Qualitative or categorical variables consist of names of categories. These names may be numerical, but the numbers (or names) are simply codes to identify the groups or categories into which the individuals are divided. Categorical variables with two categories, like yes or no, up or down, or, more generally, 1 and 0, are called binary variables. Those with more than two-categories are sometimes called multi-categorical variables. When the categories included in a variable are merely names, and come in no particular order, we sometimes call them nominal variables. The most important summary of such a variable is usually a table of frequencies, and the mode becomes an important single summary, while the mean and median are essentially useless. In the nh_adults data, Race is a nominal variable with multiple unordered categories. So is MaritalStatus. The alternative categorical variable (where order matters) is called ordinal, and includes variables that are sometimes thought of as falling right in between quantitative and qualitative variables. Examples of ordinal multi-categorical variables in the nh_adults data include the Education and HealthGen variables. Answers to questions like “How is your overall physical health?” with available responses Excellent, Very Good, Good, Fair or Poor, which are often coded as 1-5, certainly provide a perceived order, but a group of people with average health status 4 (Very Good) is not necessarily twice as healthy as a group with average health status of 2 (Fair). Sometimes we treat the values from ordinal variables as sufficiently scaled to permit us to use quantitative approaches like means, quantiles, and standard deviations to summarize and model the results, and at other times, we’ll treat ordinal variables as if they were nominal, with tables and percentages our primary tools. Note that all binary variables may be treated as ordinal, or nominal. Binary variables in the nh_adults data include Sex, PhysActive, Smoke100, SleepTrouble. Each can be thought of as either ordinal or nominal. Lots of variables may be treated as either quantitative or qualitative, depending on how we use them. For instance, we usually think of age as a quantitative variable, but if we simply use age to make the distinction between “child” and “adult” then we are using it to describe categorical information. Just because your variable’s values are numbers, don’t assume that the information provided is quantitative. References "],
["this-is-work-in-progress.html", "This is Work in Progress", " This is Work in Progress Dr. Love is revising these notes and adding new materials regularly. Materials will continue to be posted leading up to the start of class, as well as over the course of the Fall semester. "],
["references.html", "References", " References "]
]
